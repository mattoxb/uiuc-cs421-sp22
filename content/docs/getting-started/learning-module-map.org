---
title: Learning Modules Map
date: 2021-06-25
draft: false
menu: getting-started
type: book
weight: 3
---

Here is a listing of the learning modules and the assignments that fulfill them.
We will update this whenever we release a new assignment.  Each LM needs 10 points fulfill;
some assignments give more points than others, and some LMs have more that 10 points of opportunity
(so you could miss something and sill have other opportunities).

If two assignments are listed with a + between them then both are necessary to
fulfill the objective.   If they are comma separated then you will have a choice.

Second chance exams are not listed.  Exam 2 will "second chance" Exam 1, Exam 3 will
"second chance" Exam 2, and the Final will second chance all three midterms.

| Module                        | Outcome                                                                                              | Points | Fulfilling Assignment     |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 1. Recursion                  | 1. Integer Recursion                                                                                 |      2 | Exam 1                    |
|                               | 2. Mapping Recursion                                                                                 |      2 | Activity 1                |
|                               | 3. Folding Recursion                                                                                 |      2 | Activity 1                |
|                               | 4. Tail Recursion                                                                                    |      2 | Exam 1                    |
|                               | 5. Tail Recursion Advantage                                                                          |      2 | Exam 1                    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 2. ADTs                       | 1. Write datatype                                                                                    |      2 | MP 1                      |
|                               | 2. Consume datatype                                                                                  |      2 | Activity 2                |
|                               | 3. Transform datatype                                                                                |      2 | Exam 1                    |
|                               | 4. Produce datatype                                                                                  |      2 | MP 1                      |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 3. HOFs                       | 1. Writing HOFs                                                                                      |      3 | Exam 1                    |
|                               |                                                                                                      |      2 | Activity 3                |
|                               | 2. Using HOFs                                                                                        |      5 | Exam 1                    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 4. Interpreters (Expressions) | 1. Write a datatype for eval                                                                         |      2 | MP 2                      |
|                               | 2. Write an operator lifting function                                                                |      4 | MP 2                      |
|                               | 3. Write an eval clause from semantics                                                               |      4 | MP 2                      |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 5. Interpreters (Functions)   | 1. Use eval to create a closure                                                                      |      4 | MP 2                      |
|                               | 2. Use eval to apply a function                                                                      |      4 | MP 2                      |
|                               | 3. Show why closures need an environment                                                             |      2 | Exam 2                    |
|                               | 4. Select difference between procedure and function                                                  |      2 | Exam 2                    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 6. Lambda calculus            | 1. Reduce a lambda calculus expression                                                               |     10 | Exam 1                    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 7. Evaluation Semantics       | 1. Write a big step semantics proof tree.                                                            |      5 | Exam 1                    |
|                               | 2. Write a small step semantics proof.                                                               |      5 | Exam 1                    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 10. Continuations             | 1. Compare Tail Recursion and Continuations                                                          |      2 | Exam 2                    |
|                               | 2. Convert/write a function to CPS                                                                   |      8 | Exam 2                    |
|                               | 3. Use Continuations to control program flow                                                         |      4 | CPS Activity *or* MP 4    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 11. Type Classes and Monads   | 1. Implement the Eq or Ord type class for a given type.                                              |      2 | Typeclass Activity        |
|                               | 2. Implement a Functor type class for a given type.                                                  |      2 | Exam 2                    |
|                               | 3. Implement an Applicative type class for a given type.                                             |      2 | Exam 2                    |
|                               | 4. Implement a Monad type class for a given type.                                                    |      4 | Exam 2                    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 12. Grammars                  | 1. Given a grammar, show that it is ambiguous by giving an expression and two different parse trees. |      1 | Grammar Activity          |
|                               |                                                                                                      |      4 | Exam 2                    |
|                               | 2. Given a grammar, determine the FIRST and FOLLOW sets of its non-terminal symbols.                 |      1 | Grammar Activity          |
|                               |                                                                                                      |      4 | Exam 2                    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 13. Regular Languages         | 13.1 – Given a regular expression, show an equivalent right-linear grammar.                          |      4 | Exam 2                    |
|                               | 13.2 – Given a description of a pattern, show an equivalent regular expression.                      |      4 | Regular Language Activity |
|                               | 13.3 – Indicate the limits of a regular expression (MC)                                              |      2 | Exam 2                    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
| 14. LL Grammars               | 1. Given an LL grammar, give the Haskell implementation                                              |      4 | Exam 2                    |
|                               | 2. Convert a non-LL grammar to LL                                                                    |      6 | Exam 2                    |
|-------------------------------+------------------------------------------------------------------------------------------------------+--------+---------------------------|
