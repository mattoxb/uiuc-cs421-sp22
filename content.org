#+TITLE: CS 421 Web Content
#+HUGO_BASE_DIR: .
#+HUGO_SECTION: lectures

* Ideas

* Learning Modules

* Documentation
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_HUGO_SECTION: docs
:END:

- [[/docs/getting-started][Getting Started]]
- [[/docs/policies][Policies]]
- [[/docs/modules][Learning Modules]]

* Getting Started
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_HUGO_SECTION: docs/getting-started
:END:

** Getting Started
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:END:

Here is information we think you will need to get things set up and get the most
out of this course.

** Why Should I Take This Course?
:PROPERTIES:
:ID:       de1d9c2f-e682-4299-8ce6-0cd7ec48848f
:EXPORT_FILE_NAME: why-take-this
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :linktitle Why Take This? :weight 2
:END:


There are many benefits to study programming languages.  Here are some that might be convincing
to you.

*** Gain the ability to implement a language.

Before taking this course you are most likely a *consumer* of programming languages.  You may have opinions about which
ones you like best, but your options are restricted to languages that already exist.  After this course, you will be
able to design and implement a language for yourself.  Maybe you're thinking, "Why would I need to do that?"  One reason
this happens is that the developers of a software product decide they want to enable their users to write scripts to
control it.  There are languages like Lua you could use, but they might not be a good fit.

*** Document your language and understand language documentation

A good part of this course covers an area called *semantics*, or the meaning of languages.  Being able to write a formal
specification of your language means that if multiple teams decide to implement it, their implementations will all do
the same thing.  (At least, there's a chance that could happen!)  Being able to read a formal specification of a
language means you will understand precisely how a feature works.

You can also use formal semantics of languages to do things like verify the correctness of a program in certain
situations.  (The [[https://en.wikipedia.org/wiki/Halting_problem][halting problem]] means we'll can't hope to do it in all cases.)

*** See the variety of languages specialized for certain tasks

Most of the languages you will have learned to this point are general purpose languages.  And most of them are
imperative (command based) languages with objects and classes as a major component.  In this class you will learn other
language paradigms such as functional (Haskell and Scheme), logic (Prolog), and stack-based (Forth).  Functional
languages allow very reliable and very concise programs.  Prolog can solve your type-inferencer MP in about 15 minutes,
instead of the week we are going to give you to implement it in Haskell.  Languages like Forth are well suited for
embedded systems.  Scheme has a language construct that allows you to *program the programming language* itself.

You can live a long and happy programmer's life only knowing Python or Javascript, but then you would never even be
aware of some of the other options you have.

* Old Videos :noexprot:

      - title: Prolog Activity (Spring 2020)
        url: /videos/prolog-activity
      - title: In class session (Spring 2021)
        url: https://mediaspace.illinois.edu/media/t/1_bxljf5i6

* Policies
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_HUGO_SECTION: docs/policies
:END:

** Policies
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :linktitle Policies :weight 1 :icon book-open-cover :icon_pack fas
:END:

Policies and FAQs go here!

** Grading Details
:PROPERTIES:
:EXPORT_FILE_NAME: grading-faq
:ID:       6f2ced9d-b009-43e6-93e2-63bc29d1c708
:END:

There are two grading schemes that we will keep in play.  The first one is the one we started with,
the second is a simpler one that will result in better scores for most people.  We will use whichever
gives you the best score.

*** Learning Modules and Outcomes -- Scheme 1

This is the "original" version.

- There are 20 learning modules in the course, each themed around a specific course topic.
- Each learning module has 10 points that we distribute among one or more /outcomes/.
- Each outcome has one or more assessments that will "fulfill" it if completed.
- To fulfill a learning module you must complete enough outcomes to have 10 points in the learning module.
  - Most learning modules will have exactly 10 points, but it is possible for there to be more than 10.
    In those cases, you still only need to get 10 points.
- You cannot partially complete a learning module.

*** Learning Modules and Outcomes -- Scheme 2

This is the simplified version.

- The 20 learning modules are organizational only, and do not factor into the grade.
- Each learning module has 10 points that we distribute among one or more /outcomes/.
- Each outcome has one or more assessments that will "fulfill" it if completed.
- You will get the points for each outcome you fulfill, up to 10 points in the learning module.
- Your grade will be determined by what percentage of outcome points you achieve, using a standard 10 point scale.

*** Example

**** Suppose there are four LMs.
- LM 1 you got 7 points.
- LM 2 you got 10 points.
- LM 3 you got 4 points.
- LM 3 you got 9 points.


**** Grading examples
- Scheme 1 :: You got 2 LMs.
- Scheme 2 :: You get 30/40 points.
- In this case, we would apply scheme 2 to determine your grade.


*** Assessments

There are four kinds of assessments you will see.

- Machine problems (MPs) :: These are long programming assignments.  The threshold for passing them is 95%.
  - Before the MP is due you can get full credit on it.
  - There is a one-week extension period in which you can only get 95%. Thus, you must fully complete the MP for it to
    count.
- Exam Questions :: Most exam questions involve coding or some kind of mathematical manipulation (like lambda calculus reductions).
  - The threshold for passing an exam question is 100%, except for proof trees.  These are passing at 95%.
  - If you don't get an exam question right, you will have another attempt on the following midterm (if there is one).
  - You will also get an attempt on the final exam.
  - An exam question usually will affect only a single outcome.  If you miss an exam question you only need to focus on the outcomes
    you missed, not the whole learning module.
- Activity Questions ::
  - Activities are primarily designed for you to practice the assessments you will see on an exam.
  - An activity /may/ contribute to some of the outcomes of a learning module, but not always.
  - We use the score for the whole activity, not the individual questions within it.
- In-Class POGIL Activities ::
  - These are graded based on participation. Signing into a POGIL group on PrairieLearn during the class period (for
    live section) or during the next five days (for asynchronous students) will be called "attendance".
  - In order to get an A in the class, you must attend (or be excused from) 80% of the group activities.

** Syllabus
:PROPERTIES:
:EXPORT_FILE_NAME: syllabus
:ID:       788a9149-089c-4d8a-a068-8076573d6862
:END:

*** Location and Times

  - Course Title: Programming Languages and Compilers
  - Dates: January 18 to May 4.
  - Instructor: Mattox Beckman
  - Textbook: course notes
  - Section B3/B4
    - CRNs: 31375,31376
    - Location: 3039 Campus Instructional Facility
  - Section D3/D4
    - CRNs: 48195
    - Location: 0035 Campus Instructional Facility


*** Official Description and Learning Goals

The instructor's course goals are on the homepage, but here's the university description of the course:

#+begin_quote
structure of programming languages and their implementation. basic language design principles; abstract data types;
functional languages; type systems; object-oriented languages. basics of lexing, parsing, syntax-directed translation,
semantic analysis, and code generation.

course information: 3 undergraduate hours. 3 or 4 graduate hours.

prerequisite: cs 233 and cs 374.
#+end_quote


Here are the official learning goals:

 - learn to program in a functional programming language
 - understand the evaluation of programs in a functional programming language
 - be able to write a type checker / type inferencer given a formal type system
 - be able to write a lexer, and a parser using recursive-descent parsing.
 - program translation: be able to write a syntax-directed translator from abstract syntax to intermediate representations
 - recognize and use major methods of specification of dynamic semantics
 - write a interpreter based on a formal operational semantics of the language

*** Assignments and Grading

# Cite Nilson2015 at some point here.

This course will use *mastery grading*.  The grade for this course will not be determined by total number of points, but
by completing a required number of *learning modules*, and a required number of *machine problems*.

**** Learning Modules

A learning module is a bundle of *learning outcomes* (skills you should acquire) along with assessments
that measure these skills.

  - Each learning module will typically contain four or five assessments.
  - Each assessment is graded pass/fail.  You must get full credit on an assessment to pass it, but...
  - You will have **multiple opportunities** to complete each assessment.
  - To complete a learning module, you must pass all of the underlying learning outcomes.

**** Machine Problems

Typically there will be about six machine problems, called *machine problems* (MPs). We will release one approximately
every two weeks. You are allowed to get help on the machine problems, but you need to cite your help.


**** In-class Activities

This class is an active learning / flipped lecture class.  The intent is that you will watch a "pre-lecture video"
before class, and then during class you will participate in a team activity.  These activities are
[[https://pogil.org][POGIL]] activities.

Attendance and participation in the team activities are required.  Please see [[/docs/getting-started/remote-students][these instructions]] if you want to take the class remotely or as a Chicago City Scholars
student.

In order to get an A in the class, you must attend (or be excused from) 80% of the team activities.

**** Web Assignments

In addition to the written part that is done in class, there is an online part that tests the concepts you learned in
class.  You are allowed as many attempts as you need to solve the problems, and most activities will fulfill part of the
associated learning module.  You will have one week to complete them.

**** Exams

There will be three midterm exams and one final exam.  The exams do not confer points, but each problem on the exam will
fulfill part of a mastery area.  Each of these mastery area components will appear again on the final exam, which gives
you a "second chance" if you need it:  If you have already gotten credit for an area,  you may ignore it on the final
exam without penalty.  If you did not get credit on an area from taking the midterm, you can still get credit by doing
that problem on the final.  This also means that the entire final exam is optional if you have already obtained the
grade you want.

One week before an exam, we will provide a practice exam that follows the same format for your studying pleasure.

This course uses the college of engineering [[http://edu.cs.illinois.edu/cbtf][computer-based testing facility]] (CBTF)
for its exams.  The policies of the CBTF are the policies of this course, and academic integrity infractions related to
the CBTF are infractions in this course.

If you have accommodations identified by the division of rehabilitation-education services (DRES) for exams, please take
your letter of accommodation (LOA) to the CBTF proctors in person before you make your first exam reservation. The
proctors will advise you as to whether the CBTF provides your accommodations or whether you will need to make other
arrangements with your instructor.

Any problem with testing in the CBTF must be reported to CBTF staff at the time the problem occurs. **If you do not
inform a proctor of a problem during the test then you forfeit all rights to redress.**

**** 4th Hour Project

If you are a graduate student taking the course for 4 hours, then you need to complete [[/docs/project/][a project]]. The
project does not confer a grade, but if you do not do a satisfactory job on it you will lose a letter grade.

**** Late Policy / Missing Exams

Late submissions are built into PrairieLearn.  For machine problems, you will have one week to turn it it for 95%
credit.  (This would be enough to fulfull the turn-in and LM requirements, but you would need full credit.)

**** Code Efficiency

Unless stated otherwise, you should assume that code that does not compile, or code that is inefficient (in terms of
time and space complexity), will not earn any points.  **We will not hand grade non-compiling code**.

***** Regrade Requests

If there is an error in the grading of an assignment, please file an issue request on [[/docs/getting-started/github][your github repository]]. Please
assign the tag "regrade" and assign the issue to the instructor.

Once grades are released, you have *one week* to file any regrade requests.

*** Grade Cutoffs

We will determine your grade based on how many of the 20 learning modules and 6 MPs you complete, and also attendance.

 | Grade | Learning Modules | MPs | Attendance |
 |-------+------------------+-----+------------|
 | A     |               18 |   5 | >=80%      |
 | B     |               16 |   4 | <80%       |
 | C     |               14 |   3 |            |
 | D     |               10 |   2 |            |


If you complete more MPs than are required for your grade, or enough learning modules for the next higher grade, we will
give you a + grade.  E.g., if you did 16 learning modules but all 6 MPs, you would get a B+.  Similarly if you completed 18
learning modules but only 4 MPs.

To get an A+, you must complete all 20 learning modules and all 6 MPs.

As explained above, 4 credit hour students must also complete the project or else lose a letter grade.

Undergraduates are encouraged to do the extra project as well.  It will not affect your grade, but it will give me something
to say if you happen to want a letter of recommendation later.

*** Academic Integrity

The University of Illinois at Urbana-Champaign student code should also be considered as a part of this syllabus.
Students should pay particular attention to Article 1, Part 4: Academic Integrity. Academic dishonesty may result in a
failing grade. Every student is expected to review and abide by the [[[http://studentcode.illinois.edu/][academic integrity policy]].  Ignorance is not an excuse for any academic dishonesty. it is your
responsibility to read this policy to avoid any misunderstanding. Do not hesitate to ask the instructor(s) if you are
ever in doubt about what constitutes plagiarism, cheating, or any other breach of academic integrity.

*** Students with Disabilities

To obtain disability-related academic adjustments and/or auxiliary aids,
students with disabilities must contact the course instructor as soon as
possible. To insure that disability-related concerns are properly
addressed from the beginning, students with disabilities who require
assistance to participate in this class should contact disability
resources and educational services
([[http://www.disability.illinois.edu/][DRES]]) and see the instructor
as soon as possible. If you need accommodations for any sort of
disability, please speak to me after class, or make an appointment to
see me, or see me during my office hours. DRES provides students with
academic accommodations, access, and support services. To contact DRES
you may visit 1207 S. Oak St., Champaign, call 333-4603 (v/tdd), or
e-mail a message to [[mailto:disability@uiuc.edu][disability@uiuc.edu]].

*** Emergency Response Recommendations

The university police have posted some [[http://police.illinois.edu/emergency/][emergency response recommendations]]. I
encourage you to review this website and the campus building
[[http://police.illinois.edu/emergency-preparedness/building-emergency-action-plans/][floor plans website]]
within the first 10 days of class.

Of course, since we're all online, your classroom is likely your living space.  Have you considered making
a fire safety plan with your family or roommates?

*** Family Educational Rights and Privacy Act (FERPA)


Any student who has suppressed their directory information pursuant to family
educational rights and privacy act (FERPA) should self-identify to the
instructor to ensure protection of the privacy of their attendance in this
course. see the [[http://registrar.illinois.edu/ferpa][FERPA]] site for more information.

*** Mental Health

Diminished mental health, including significant stress, mood changes, excessive worry, substance/alcohol abuse, or
problems with eating and/or sleeping can interfere with optimal academic performance, social development, and emotional
wellbeing. The University of Illinois offers a variety of confidential services including individual and group
counseling, crisis intervention, psychiatric services, and specialized screenings at no additional cost. If you or
someone you know experiences any of the above mental health concerns, it is strongly encouraged to contact or visit any
of the University's resources provided below.  Getting help is a smart and courageous thing to do -- for yourself and
for those who care about you.

Counseling Center: 217-333-3704, 610 East John Street Champaign, IL 61820

McKinley Health Center:217-333-2700, 1109 South Lincoln Avenue, Urbana, Illinois 61801


* Lectures
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type page
:EXPORT_HUGO_SECTION: lectures
:END:

** Lecture Template :noexport:
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: something
:END:


***  Videos

*** Further Reading


** Regular Languages
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: regular-languages
:END:

Regular languages and languages that a computer can recognize
with only a finite amount of memory and no backtracking.
They correspond to right linear grammars.


***  Videos

- [[/videos/regular-languages][Regular Languages]]
- [[/videos/right-linear-grammars][Right Linear Grammars]]
- [[https://mediaspace.illinois.edu/media/t/1_1ca3c40u][Spring 2022 Class Session]]
#  - title: Activity Walkthrough (Fall 2020)
#    url: https://mediaspace.illinois.edu/media/1_kuo1voln
#  - title: Activity Walkthrough (Spring 2021)
#    url: https://mediaspace.illinois.edu/media/1_es2ma6jp

*** Further Reading

- [[/handouts/regex-crossword.pdf][Regular Expression Crossword Puzzle]]
- [[https://swtch.com/~rsc/regexp/regexp1.html][Regular Expression Matching Can be Simple and Fast]]
  Surprisingly, many programming languages do regex matching wrong.



** LL Parsing
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: ll-parsing
:END:

Need a parser but don't have a lot of time?  Maybe a recursive-descent parser
will do the trick.  LL parsers are simple, easy to write, and sometimes they even work
with the language you had in mind!

*** Videos

- [[/videos/ll-parsing][LL Parsing]]
- [[/videos/fixing-non-ll-grammars][Fixing Non-LL Grammars]]
- [[https://mediaspace.illinois.edu/media/t/1_a1af9qv3][Spring 2022 Class Session]]

*** Further Reading

- [[/handouts/ll-problems.pdf][Extra LL Problems]]  Here are more problems, with solutions at the end.
  We will not go over them formally in class, but feel free to ask about them if you want.

# - title: LL Activity (Spring 2021)
#   url: https://mediaspace.illinois.edu/media/1_q6au0u3i
# - title: LL Activity (Fall 2020)
#   url: https://mediaspace.illinois.edu/media/1_4308d5p1

** LR Parsing
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: lr-parsing
:ID:       e65db97a-5831-419f-b47a-c97df2e8ae31
:END:

LR parsers have been the industry standard for quite some time.  The gnu C compiler
even comes with an LR parser generator (called `bison`, a take-off of an older utility
called `yacc`.  Computer people like puns.).  These parsers are fast and capable, but
to be effective using them you really need to understand how they work.


***  Videos

- [[/videos/lr-parsing][LR Parsing]]
- [[https://mediaspace.illinois.edu/media/t/1_qv5ayqow][Class Session (Spring 2022)]]

*** Further Reading

- [[/handouts/lr-parsing-tables.pdf][LR Parsing Tabels]]


** Combinator Parsing
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: combinator-parsing
:END:

We have seen a few different kinds of parsers to this point.  They all work by constructing
state machines to handle the parsing.  A new class of parsers has started to become popular
lately.  Combinator parsers use functions to represent parsers, and they can be composed together
to make more sophisticated parsers.

We will show how to build one of these from the ground up, and make use of monads to give us
a natural syntax.

***  Videos

- [[/videos/combinator-parsing][Combinator Parsing]]
- [[https://mediaspace.illinois.edu/media/t/1_ir3m0ngw][Activity Walkthrough (Spring 2022)]]
# - [[/videos/combinator-parsing-activity][Combinator Parsing Activity]]  This is a walkthrough of an older activity, linked below.

*** Further Reading
- [[/handouts/combinator-parsing-pogil.pdf][Old Combinator Parsing Activity]]
- [[http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf][Monadic Parser Combinators (Graham Hutton)]]
  This paper is a tutorial about monads and parser combinators. It uses a language called Gopher, a precursor to Haskell.

** Small Step Semantics
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: small-step-semantics
:END:

Today we will talk about *small-step semantics*, also called *transition
semantics*, or even *operational semantics*. The idea with this semantics is
that we model what one step of computation looks like, and use that to describe
the meaning of a program.

One important concept that comes up with this form is the *Church-Rosser theorem*.

*** Videos

- [[/videos/small-step-semantics][Small Step Semantics]]
- [[/videos/church-rosser-property][The Church-Rosser Property]]
- [[https://mediaspace.illinois.edu/media/t/1_te2cdxt7][Activity Walkthrough (Spring 2022)]]


** Unification
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: unification
:END:

Unification is a major technique in implementing and understanding programming languages.
We use it for pattern matching, semantics, higher order type checking, and there is even
an entire programming language that uses unification to drive computation.


*** Videos
- [[/videos/unification][Unification]]
- [[https://mediaspace.illinois.edu/media/t/1_b8wr409j][Activity Walkthrough (Spring 2022)]]

#  - title: Class Session (Spring 2021)
#    url: https://mediaspace.illinois.edu/media/t/1_039yu8bz

** Hoare Semantics
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: hoare-semantics
:END:

The other semantics we have looked at enable us to understand how a program determines its value or type.  This kind of
semantics helps us understand the conditions under which a program will give us the correct answer.

*** Videos

      - [[/videos/hoare-semantics][Hoare Semantics]]
      - [[https://mediaspace.illinois.edu/media/t/1_2lxijk7p][Class Session (Spring 2022)]]
#        url: https://mediaspace.illinois.edu/media/t/1_mmsrj63i  Spring 2021
*** Further Reading
- [[https://www.cs.utexas.edu/users/EWD/transcriptions/EWD02xx/EWD264.html][EWD 264 /On Understanding Programs/]]

**  Monotype Semantics
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: monotype-semantics
:END:

This is the first of a two part series on typing semantics.  Semantics can do
more than just discovering the value of a program or expression; we can use
semantics to describe other properties of programs as well.  In this case,
we are interested in the types that expressions can have.

In this lecture we will discuss *monotype* semantics; where expressions can
have only one ground type.

*** Videos

- [[/videos/monotype-semantics][Monotype Semantics]]
- [[https://mediaspace.illinois.edu/media/t/1_vyzrs5s7][Class Session (Spring 2022)]]
#   - title: Class Session (Spring 2021)
#     url: https://mediaspace.illinois.edu/media/t/1_clye3wel
#   - title: Monotype Activity Walkthrough (Fall 2020)
#     url: /videos/monotype-activity


** Polytype Semantics
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: polytype-semantics
:END:

This is a continuation from the last lecture.  Now we want to
be able to give types for functions like =id :: a -> a=.

*** Videos

- [[/videos/polytype-semantics][Polytype Semantics]]
- [[https://mediaspace.illinois.edu/media/t/1_05pr1mlq][CLass Session (Spring 2022)]]
#  - title: Class Session (Spring 2021)
#    url: https://mediaspace.illinois.edu/media/t/1_6d5483by
#  - title: Polytype Activity Walkthrough
#    url: /videos/polytype-activity

** Prolog
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: prolog
:END:

One of the strangest languages we will see in this course is <Sc>Prolog</Sc>.  It is
incredibly useful for solving certain kinds of problems, so you should be
familiar with it in case you meet such problems in the future.

*** Videos
- [[/videos/prolog][Prolog]]
- [[https://mediaspace.illinois.edu/media/t/1_hexswq1d][Class Session (Spring 2022)]

** Prolog Cut
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: prolog-cut
:END:

One problem with <Sc>Prolog</Sc> is that it can try too many things to satisfy a
set of constraints.  The Cut Operator eliminates some of the search
possibilities by committing a search to whatever decisions have already been
made.  It can also prevent the destruction of innocent telescopes.

***  Videos
- [[/videos/prolog-cut][Prolog's Cut Operator]]
- [[https://mediaspace.illinois.edu/media/t/1_14r80n16][Class Session (Spring 2022)]]

** Variables and Parameters
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type book
:EXPORT_FILE_NAME: variables
:END:

You think you know what a variable is, don't you?  They can be very complicated, actually.  Variables have many
different attributes.  These attributes can become *bound* to the variable at different times.  We will talk about
binding times, and the four properties that variables must have.

*** Videos
- [[/videos/variables][Variables]]
- [[/videos/parameters][Parameters]]
- [[https://mediaspace.illinois.edu/media/t/1_zopjq4ne][Class Session (Spring 2022)]]

* Videos
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type page
:EXPORT_HUGO_SECTION: videos
:END:

